<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>Web Audio API</title>
    <meta
      name="description" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1, shrink-to-fit=no"
    />
    <link rel="stylesheet" type="text/css" href="styles/style.css" />
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-iYQeCzEYFbKjA/T2uDLTpkwGzCiq6soy8tYaI1GyVh/UjpbCx/TYkiZhlZB6+fzT"
      crossorigin="anonymous"/>
  </head>
  <body>
    <!--
       Some browsers' autoplay policy requires that an AudioContext be initialized
       during an input event in order to correctly synchronize.
       So provide a simple button to get things started.
  -->
    {{!-- <button id="startbutton">Press to load tracks</button> --}}
    <div class="main">
      <!-- audio player -->
      <!-- play / pause -->
      <!-- volume up /down  -->
      <!--  -->

      <div id="acoustic-guitar" width="200" height="200" style="position: absolute; top: 20%; left: 43%;">
        <div id="acoustic-guitar-controls">
        <img src="/images/acoustic_guitar.png" width="100" style="position: absolute; top: 40px; left: 50px">
        {{!-- up --}}
        {{!-- down --}}
        {{!-- left  --}}
        {{!-- right --}}
        <button data-control="left" aria-labelledby="move-acoustic-guitar left-label" style="background-color: transparent; border: none; position: absolute; top: 80px; left: 0px">
            <span id="left-label" style="display: none">Left</span>
            <i class="fa-solid fa-arrow-left fa-inverse fa-2x"></i>
          </button>
          <button data-control="up" aria-labelledby="move-acoustic-guitar up-label" style="background-color: transparent; border: none; position: absolute; top: 0px; left: 80px">
            <span id="up-label" style="display: none">Up</span>
            <i class="fa-solid fa-arrow-up fa-inverse fa-2x"></i>
          </button>
          <button data-control="right" aria-labelledby="move-acoustic-guitar right-label" style="background-color: transparent; border: none; position: absolute; top: 80px; left: 150px">
            <span id="right-label" style="display: none">Right</span>
            <i class="fa-solid fa-arrow-right fa-inverse fa-2x"></i>
          </button>
          <button data-control="down" aria-labelledby="move-acoustic-guitar down-label" style="background-color: transparent; border: none; position: absolute; top: 170px; left: 80px">
            <span id="down-label" style="display: none">Down</span>
            <i class="fa-solid fa-arrow-down fa-inverse fa-2x"></i>
          </button>
        </div>
        {{!-- play / pause --}}
        {{!--  volume --}}
        <div class="player-acoustic-guitar" style="position: absolute; top: 40px; left: 50px">
        <div class="player-btn" style="position: absolute; top: 7px; left: 10px; opacity: 50% !important" >
          <!-- loaded audio -->
          <audio src="/sounds/multi-track_leadguitar.mp3" crossOrigin="anonymous"></audio>
    
          <button type="button" class="btn btn-play tape-controls-play" id="btn-play" style="display: inline" data-playing="false" role="switch"
          aria-checked="false" style="position: absolute; top: 0px; left:0px">
            <span><i class="fa-solid fa-circle-play fa-3x fa-inverse"></i></span>
          </button>
          <button type="button" class="btn btn-pause" id="btn-pause" style="display: none" style="position: absolute; top: 0px; left: 0px">
            <span><i class="fa-solid fa-circle-pause fa-3x fa-inverse"></i></span>
          </button>
          </div>
          <script>
            const playbtn = document.getElementById('btn-play');
            const pausebtn = document.getElementById('btn-pause');
            playbtn.addEventListener('click', () => {
            playbtn.style.display = 'none';
            pausebtn.style.display = 'inline';
          });
          </script>
          <script>
            pausebtn.addEventListener('click', () => {
              pausebtn.style.display = 'none';
            playbtn.style.display = 'inline';
          });
          </script>

          <br>
          <div style="background-color: transparent; border: none; position: absolute; top: 170px; left: -25px">
          <span style="display: inline !important; position: absolute; top: 2px; left: -25px"><i class="fa-solid fa-volume-low fa-inverse"></i></span>
				
          <input style="display: inline !important; width: 150px !important"  type="range" id="volume" class="control-volume" min="0" max="2" value="1" list="gain-vals" step="0.01" data-action="volume" />
			<datalist id="gain-vals">
        <option value="0" label="min"></option>
				<option value="2" label="max"></option>
          
			</datalist>
      <span style="display: inline !important; position: absolute; top: 2px; left: 160px"><i class="fa-solid fa-volume-high fa-inverse"></i>  
        
        </div>
      </div>
    </div>    
      </div>

{{!-- clavi --}}

      <div id="clav" width="200" height="200" style="position: absolute; top: 60%; left: 43%;">
        <div id="clav-controls">
        <img src="/images/midi.png" width="100" style="position: absolute; top: 72px; left: 47px">
        {{!-- up --}}
        {{!-- down --}}
        {{!-- left  --}}
        {{!-- right --}}
        <button data-control="left" aria-labelledby="move-clav left-label" style="background-color: transparent; border: none; position: absolute; top: 80px; left: 0px">
            <span id="left-label" style="display: none">Left</span>
            <i class="fa-solid fa-arrow-left fa-inverse fa-2x"></i>
          </button>
          <button data-control="up" aria-labelledby="move-clav up-label" style="background-color: transparent; border: none; position: absolute; top: 0px; left: 80px">
            <span id="up-label" style="display: none">Up</span>
            <i class="fa-solid fa-arrow-up fa-inverse fa-2x"></i>
          </button>
          <button data-control="right" aria-labelledby="move-clav right-label" style="background-color: transparent; border: none; position: absolute; top: 80px; left: 150px">
            <span id="right-label" style="display: none">Right</span>
            <i class="fa-solid fa-arrow-right fa-inverse fa-2x"></i>
          </button>
          <button data-control="down" aria-labelledby="move-clav down-label" style="background-color: transparent; border: none; position: absolute; top: 170px; left: 80px">
            <span id="down-label" style="display: none">Down</span>
            <i class="fa-solid fa-arrow-down fa-inverse fa-2x"></i>
          </button>
        </div>
        {{!-- play / pause --}}
        {{!--  volume --}}
        <div class="player-clav" style="position: absolute; top: 40px; left: 50px">
        <div class="player-btn" style="position: absolute; top: 7px; left: 10px; opacity: 50% !important" >
          <!-- loaded audio -->
          <audio src="/sounds/multi-track_clav.mp3" crossOrigin="anonymous"></audio>
    
          <button type="button" class="btn btn-play1 tape-controls-play" id="btn-play" style="display: inline" data-playing="false" role="switch"
          aria-checked="false" style="position: absolute; top: 0px; left:0px">
            <span><i class="fa-solid fa-circle-play fa-3x fa-inverse"></i></span>
          </button>
          <button type="button" class="btn btn-pause1" id="btn-pause" style="display: none" style="position: absolute; top: 0px; left: 0px">
            <span><i class="fa-solid fa-circle-pause fa-3x fa-inverse"></i></span>
          </button>
          </div>
          <script>
            const playbtn1 = document.getElementById('btn-play1');
            const pausebtn1 = document.getElementById('btn-pause1');
            playbtn1.addEventListener('click', () => {
            playbtn1.style.display = 'none';
            pausebtn1.style.display = 'inline';
          });
          </script>
          <script>
            pausebtn1.addEventListener('click', () => {
              pausebtn1.style.display = 'none';
            playbtn1.style.display = 'inline';
          });
          </script>

          <br>
          <div style="background-color: transparent; border: none; position: absolute; top: 170px; left: -25px">
          <span style="display: inline !important; position: absolute; top: 2px; left: -25px"><i class="fa-solid fa-volume-low fa-inverse"></i></span>
				
          <input style="display: inline !important; width: 150px !important"  type="range" id="volume" class="control-volume" min="0" max="2" value="1" list="gain-vals" step="0.01" data-action="volume" />
			<datalist id="gain-vals">
        <option value="0" label="min"></option>
				<option value="2" label="max"></option>
          
			</datalist>
      <span style="display: inline !important; position: absolute; top: 2px; left: 160px"><i class="fa-solid fa-volume-high fa-inverse"></i>  
        
        </div>
      </div>
    </div>    
      </div>
      

      <div id="boombox" style="display: none">
        <div class="boombox-body">
          <i class="fa-solid fa-headphones fa-inverse fa-5x"></i>
          </div>

          

      <input
              type="range"
              id="panner"
              class="control-panner"
              list="pan-vals"
              min="-1"
              max="1"
              value="0"
              step="0.01"
              data-action="panner"
              style="display: none"
            />
            <datalist id="pan-vals">
              <option value="-1" label="left"></option>
              <option value="1" label="right"></option>
            </datalist>
           </div> 

      <div id="move-controls" aria-labelledby="move-boombox">
        <h3 id="move-boombox"></h3>


  
        <section class="move-controls_xy" style="display: none">
          
          <button data-control="left" aria-labelledby="move-boombox left-label">
            <span id="left-label">Left</span>
          </button>
          <button data-control="up" aria-labelledby="move-boombox up-label">
            <span id="up-label">Up</span>
          </button>
          <button data-control="right" aria-labelledby="move-boombox right-label">
            <span id="right-label">Right</span>
          </button>
          <button data-control="down" aria-labelledby="move-boombox down-label">
            <span id="down-label">Down</span>
          </button>
        </section>
  
        <section class="move-controls_z" style="display: none">
          <button data-control="back" aria-labelledby="move-boombox back-label">
            <span id="back-label">Back</span>
          </button>
          <button data-control="forward" aria-labelledby="move-boombox for-label">
            <span id="for-label">Forward</span>
          </button>
        </section>
  
        <section class="move-controls_rotate" style="display: none">
          <button
            data-control="rotate-left"
            aria-labelledby="move-boombox rleft-label"
          >
            <span id="rleft-label">Rotate left</span>
          </button>
          <button
            data-control="rotate-down"
            aria-labelledby="move-boombox rdown-label"
          >
            <span id="rdown-label">Rotate downwards</span>
          </button>
          <button
            data-control="rotate-right"
            aria-labelledby="move-boombox rright-label"
          >
            <span id="-label">Rotate right</span>
          </button>
          <button
            data-control="rotate-up"
            aria-labelledby="move-boombox rup-label"
          >
            <span id="rup-label">Rotate upwards</span>
          </button>
        </section>
      </div>
    

      
      

    <script>

// The audio context must be initialized after a user interaction
const AudioContext = window.AudioContext || window.webkitAudioContext;
let audioCtx;
let listener;



function init() {
  // A user interaction happened, we can initialize the audio context
  audioCtx = new AudioContext();
  listener = audioCtx.listener;

  // Let's set the position of our listener 
  const posX = window.innerWidth/2;
  const posY = window.innerHeight/2;
  const posZ = 300;
  console.log(posX, posY, posZ)
  console.log(window.innerWidth)

  if (listener.positionX) {
    // Standard way
    
    listener.positionX.value = posX;
    listener.positionY.value = posY;
    listener.positionZ.value = posZ - 5;
  } else {
    // Deprecated way; still needed (July 2022)
    listener.setPosition(posX, posY, posZ - 5);
  }

  if (listener.forwardX) {
    // Standard way
    // the forward properties represent the 3D coordinate position of the listener's forward direction (e.g. the direction they are facing in)
    listener.forwardX.value = 0;
    listener.forwardY.value = 0;
    listener.forwardZ.value = -1;
    // the up properties represent the 3D coordinate position of the top of the listener's head
    listener.upX.value = 0;
    listener.upY.value = 1;
    listener.upZ.value = 0;
  } else {
    // Deprecated way; still needed (July 2022)
    listener.setOrientation(0, 0, -1, 0, 1, 0);
  }

  // UI controls
  const moveControls = document.querySelector("#acoustic-guitar-controls").querySelectorAll("button");

  const boombox = document.querySelector("#acoustic-guitar");

  // Variable storing the current transform (modified by the buttons)
  let transform = {
    xAxis: 0,
    yAxis: 0,
    zAxis: 0.8,
    rotateX: 0,
    rotateY: 0,
  };

  // Set up our bounds, to constrain movements
  const topBound = -posY - 400;
  const bottomBound = posY + 400;
  const rightBound = posX + 400;
  const leftBound = -posX - 400;
  const innerBound = 0.01;
  const outerBound = 1.5;

  // Set up rotation constants for boombox
  const rotationRate = 20; // bigger number slower sound rotation

  const q = Math.PI / rotationRate; //rotation increment in radians

  // Get degrees for css
  const degreesX = (q * 180) / Math.PI;
  const degreesY = (q * 180) / Math.PI;

  const innerCone = 60;
const outerCone = 90;
const outerGain = 0.3;

  // Define the boombox panner
  const panner = new PannerNode(audioCtx, {
    panningModel: "HRTF",
    distanceModel: "linear",
    positionX: posX,
    positionY: posY,
    positionZ: posZ,
    orientationX: 0.0,
    orientationY: 0.0,
    orientationZ: -1.0,
    refDistance: 1,
    maxDistance: 20_000,
    rolloffFactor: 10,
    coneInnerAngle: innerCone,
    coneOuterAngle: outerCone,
    coneOuterGain: outerGain,
  });

  // Function for setting the boombox panner values and changing the styling
  function moveBoombox(direction, prevMove) {
    switch (direction) {
      case "left":
        if (transform.xAxis > leftBound) {
          transform.xAxis -= 5;
          panner.positionX.value -= 0.07;
        }
        break;
      case "up":
        if (transform.yAxis > topBound) {
          transform.yAxis -= 5;
          panner.positionY.value -= 0.3;
        }
        break;
      case "right":
        if (transform.xAxis < rightBound) {
          transform.xAxis += 5;
          panner.positionX.value += 0.07;
        }
        break;
      case "down":
        if (transform.yAxis < bottomBound) {
          transform.yAxis += 5;
          panner.positionY.value += 0.3;
        }
        break;
      case "back":
        if (transform.zAxis > innerBound) {
          transform.zAxis -= 0.01;
          panner.positionZ.value -= 100;
        }
        break;
      case "forward":
        if (transform.zAxis < outerBound) {
          transform.zAxis += 0.01;
          panner.positionZ.value += 100;
        }
        break;
      case "rotate-right":
        transform.rotateY += degreesY;

        // 'left' is rotation about y-axis with negative angle increment
        z =
          panner.orientationZ.value * Math.cos(-q) -
          panner.orientationX.value * Math.sin(-q);
        x =
          panner.orientationZ.value * Math.sin(-q) +
          panner.orientationX.value * Math.cos(-q);
        y = panner.orientationY.value;

        panner.orientationX.value = x;
        panner.orientationY.value = y;
        panner.orientationZ.value = z;
        break;
      case "rotate-left":
        transform.rotateY -= degreesY;
        // 'right' is rotation about y-axis with positive angle increment
        z =
          panner.orientationZ.value * Math.cos(q) -
          panner.orientationX.value * Math.sin(q);
        x =
          panner.orientationZ.value * Math.sin(q) +
          panner.orientationX.value * Math.cos(q);
        y = panner.orientationY.value;
        panner.orientationX.value = x;
        panner.orientationY.value = y;
        panner.orientationZ.value = z;
        break;
      case "rotate-up":
        transform.rotateX += degreesX;
        // 'up' is rotation about x-axis with negative angle increment
        z =
          panner.orientationZ.value * Math.cos(-q) -
          panner.orientationY.value * Math.sin(-q);
        y =
          panner.orientationZ.value * Math.sin(-q) +
          panner.orientationY.value * Math.cos(-q);
        x = panner.orientationX.value;
        panner.orientationX.value = x;
        panner.orientationY.value = y;
        panner.orientationZ.value = z;
        break;
      case "rotate-down":
        transform.rotateX -= degreesX;
        // 'down' is rotation about x-axis with positive angle increment
        z =
          panner.orientationZ.value * Math.cos(q) -
          panner.orientationY.value * Math.sin(q);
        y =
          panner.orientationZ.value * Math.sin(q) +
          panner.orientationY.value * Math.cos(q);
        x = panner.orientationX.value;
        panner.orientationX.value = x;
        panner.orientationY.value = y;
        panner.orientationZ.value = z;
        break;
    }

    boombox.style.transform =
      `translateX(${transform.xAxis}px) translateY(${transform.yAxis}px) scale(${transform.zAxis}) ` +
      `rotateY(${transform.rotateY}deg) rotateX(${transform.rotateX}deg)`;

    const move = prevMove || {};
    move.frameId = requestAnimationFrame(() =>
      moveBoombox(direction, move)
    );
    return move;
  }

  moveControls.forEach((el) => {
    let moving;
    el.addEventListener(
      "mousedown",
      () => {
        let direction = el.dataset.control;
        if (moving && moving.frameId) {
          cancelAnimationFrame(moving.frameId);
        }
        moving = moveBoombox(direction);
      },
      false
    );

    addEventListener(
      "mouseup",
      () => {
        if (moving && moving.frameId) {
          cancelAnimationFrame(moving.frameId);
        }
      },
      false
    );
  });

  const track = new MediaElementAudioSourceNode(audioCtx, {
    mediaElement: audioElement,
    
  });

  // If track ends.
  // An event is fired once the track ends via the audio api.
  // We can listen for this and set the correct params on the html element
  audioElement.addEventListener(
    "ended",
    () => {
      playButton.dataset.playing = "false";
      playButton.setAttribute("aria-checked", "false");
    },
    false
  );

  // Create and control the volume slider
  const gainNode = new GainNode(audioCtx);
  const volumeControl = document.querySelector('.control-volume');
  volumeControl.addEventListener(
    "input",
    () => {
      gainNode.gain.value = volumeControl.value;
    },
    false
  );

  // Create and control the panning slider
  const stereoPanner = new StereoPannerNode(audioCtx, { pan: 0 });
  const pannerControl = document.querySelector('[data-action="panner"]');
  pannerControl.addEventListener(
    "input",
    () => {
      stereoPanner.pan.value = pannerControl.value;
    },
    false
  );

  track
    .connect(gainNode)
    .connect(panner)
    .connect(stereoPanner)
    .connect(audioCtx.destination);

  // Create and control the power button
  
}

// The boombox is an audio element with a play button
const audioElement = document.querySelector("audio");
const playButton = document.querySelector(".btn-play");
const pauseButton = document.querySelector(".btn-pause");

// Play/pause the audio
playButton.addEventListener(
  "click",
  () => {
    if (!audioCtx) {
      // First user interaction: we initialize the audio context
      
    }

    // If context is in suspended state (autoplay policy), we resume it
    // if (audioCtx.state === "suspended") {
    //   audioCtx.resume();
    // }

    if (playButton.dataset.playing === "false") {
      audioElement.play();
      playButton.dataset.playing = "true";
      // if track is playing pause it
    } else if (playButton.dataset.playing === "true") {
      audioElement.pause();
      playButton.dataset.playing = "false";
    }

    let state = playButton.getAttribute("aria-checked") === "true";
    playButton.setAttribute("aria-checked", state ? "false" : "true");
  },
  false
);
pauseButton.addEventListener(
  "click",
  () => {
    if (!audioCtx) {
      // First user interaction: we initialize the audio context
      init();
    }

    // If context is in suspended state (autoplay policy), we resume it
    if (audioCtx.state === "suspended") {
      audioCtx.resume();
    }

    if (playButton.dataset.playing === "false") {
      audioElement.play();
      playButton.dataset.playing = "true";
      // if track is playing pause it
    } else if (playButton.dataset.playing === "true") {
      audioElement.pause();
      playButton.dataset.playing = "false";
    }

    let state = playButton.getAttribute("aria-checked") === "true";
    playButton.setAttribute("aria-checked", state ? "false" : "true");
  },
  false
);
</script>

 </body>
  <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-u1OknCvxWvY5kfmNBILK2hRnQC3Pr17a+RTT6rIHI7NnikvbZlHgTPOOmMi466C8"
      crossorigin="anonymous"
    ></script>
    
		<!-- <script src="script.js" type="application/javascript"></script> -->
    <script src="https://kit.fontawesome.com/71954c5c7c.js" crossorigin="anonymous"></script>
</html>